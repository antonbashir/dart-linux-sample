// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:linux_interactor/interactor/bindings.dart' as linux_interactor;

/// Bindings for Linux Interactor sample
class SampleBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SampleBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SampleBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<linux_interactor.interactor_native_t>
      sample_interactor_initialize() {
    return _sample_interactor_initialize();
  }

  late final _sample_interactor_initializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<linux_interactor.interactor_native_t>
              Function()>>('sample_interactor_initialize');
  late final _sample_interactor_initialize =
      _sample_interactor_initializePtr.asFunction<
          ffi.Pointer<linux_interactor.interactor_native_t> Function()>();

  void sample_interactor_destroy(
    ffi.Pointer<linux_interactor.interactor_native_t> interactor,
  ) {
    return _sample_interactor_destroy(
      interactor,
    );
  }

  late final _sample_interactor_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor.interactor_native_t>)>>(
      'sample_interactor_destroy');
  late final _sample_interactor_destroy =
      _sample_interactor_destroyPtr.asFunction<
          void Function(ffi.Pointer<linux_interactor.interactor_native_t>)>();

  void sample_call_dart(
    ffi.Pointer<linux_interactor.interactor_message_t> message,
  ) {
    return _sample_call_dart(
      message,
    );
  }

  late final _sample_call_dartPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor.interactor_message_t>)>>(
      'sample_call_dart');
  late final _sample_call_dart = _sample_call_dartPtr.asFunction<
      void Function(ffi.Pointer<linux_interactor.interactor_message_t>)>();

  bool sample_check_dart(
    ffi.Pointer<linux_interactor.interactor_native_t> interactor,
  ) {
    return _sample_check_dart(
      interactor,
    );
  }

  late final _sample_check_dartPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(
                  ffi.Pointer<linux_interactor.interactor_native_t>)>>(
      'sample_check_dart');
  late final _sample_check_dart = _sample_check_dartPtr.asFunction<
      bool Function(ffi.Pointer<linux_interactor.interactor_native_t>)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final SampleBindings _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<linux_interactor.interactor_native_t> Function()>>
      get sample_interactor_initialize =>
          _library._sample_interactor_initializePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor.interactor_native_t>)>>
      get sample_interactor_destroy => _library._sample_interactor_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor.interactor_message_t>)>>
      get sample_call_dart => _library._sample_call_dartPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Bool Function(
                  ffi.Pointer<linux_interactor.interactor_native_t>)>>
      get sample_check_dart => _library._sample_check_dartPtr;
}

final class interactor_native extends ffi.Opaque {}

final class interactor_message extends ffi.Opaque {}

const int true1 = 1;

const int false1 = 0;

const int __bool_true_false_are_defined = 1;
